

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1' apply false
//	id 'io.spring.dependency-management' version '1.1.7+'
//  id("io.spring.dependency-management") version "1.1.7"
    id 'org.cyclonedx.bom' version '1.10.0'
    id("io.freefair.lombok") version "8.11"

    id "org.sonarqube" version "6.0.1.5171" // "3.5.0.2730"

    //id 'com.acme.gradle.superpom' version '1.0.0'
}

allprojects {
    repositories {
        google()
        mavenLocal()
        // Could not find method mavenLocal() for arguments [] on object of type org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository.
        mavenCentral()

        //			The RepositoryHandler.jcenter() method has been deprecated. This is scheduled to be removed in Gradle 9.0. JFrog announced JCenter's sunset in February 2021.
        //jcenter() // Could not find method jcenter() for arguments [] on object of type org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository
        maven { url 'https://jitpack.io' }
    }
}

//https://stackoverflow.com/questions/12077083/what-is-the-difference-between-allprojects-and-subprojects
subprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'jacoco'

    sonar {
        properties {
            property "sonar.sources", "src"
        }
    }

    dependencies {

//https://projectlombok.org/setup/gradle
//		compileOnly 'org.projectlombok:lombok:1.18.36'
//		annotationProcessor 'org.projectlombok:lombok:1.18.36'
//
//		testCompileOnly 'org.projectlombok:lombok:1.18.36'
//		testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

        implementation enforcedPlatform('org.springframework.boot:spring-boot-dependencies:3.4.1')
        implementation enforcedPlatform('org.springframework.cloud:spring-cloud-dependencies:2024.0.0')
        implementation enforcedPlatform('software.amazon.awssdk:bom:2.29.35')

    }
}


//javaPlatform {
//	allowDependencies()
//}


group = 'com.mvn.gradle'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


tasks.named('test') {
    useJUnitPlatform()
}

//https://discuss.gradle.org/t/what-is-xlint-deprecation-and-how-to-use-it/40270/2
tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
}

//or if you rather explicitly set the compiler argument, you can do so as well:

//tasks.withType(JavaCompile) {
//	options.compilerArgs += ['-Xlint:deprecation']
//}
